<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.5.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>pl.solutions.software.sokolik.bartosz</groupId>
  <artifactId>auditing</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>auditing</name>
  <description>Demo project for Spring Boot</description>

  <properties>
    <java.version>11</java.version>
    <hibernate.envers.version>5.4.2.Final</hibernate.envers.version>
    <jaxb.api.version>2.3.1</jaxb.api.version>
    <jaxb.runtime.version>2.3.2</jaxb.runtime.version>
    <activation.version>1.1.1</activation.version>
    <liquibase.version>3.6.3</liquibase.version>
    <commons.lang.version>3.9</commons.lang.version>
    <lombok.version>1.18.8</lombok.version>
    <h2.version>1.4.199</h2.version>
    <postgres.version>42.2.5</postgres.version>
    <maven.checkstyle.version>3.1.0</maven.checkstyle.version>
    <maven.jacoco.version>0.8.4</maven.jacoco.version>
    <checkstyle.config.location>${project.basedir}/src/main/resources/</checkstyle.config.location>
    <docker.maven.plugin.version>0.30.0</docker.maven.plugin.version>
    <build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version>
    <maven.surefire.plugin.version>3.0.0-M3</maven.surefire.plugin.version>
    <maven.failsafe.plugin.version>3.0.0-M3</maven.failsafe.plugin.version>
    <it-database-port>5432</it-database-port>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-envers</artifactId>
      <version>${hibernate.envers.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb.api.version}</version>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>${jaxb.runtime.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
      <version>${activation.version}</version>
    </dependency>

    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
      <version>${liquibase.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons.lang.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgres.version}</version>
    </dependency>

    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>4.0.0</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-path</artifactId>
      <version>4.0.0</version>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>xml-path</artifactId>
      <version>4.0.0</version>
    </dependency>

    <dependency>
      <groupId>pl.pragmatists</groupId>
      <artifactId>JUnitParams</artifactId>
      <version>1.1.1</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <finalName>application</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <configuration>
          <skipTests>${skipUnitTests}</skipTests>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven.failsafe.plugin.version}</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build.helper.maven.plugin.version}</version>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/integration-test/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-resource</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/integration-test/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <skip>${skipDocker}</skip>
          <showLogs>true</showLogs>
        </configuration>
        <executions>

          <execution>
            <id>remove-old-it-image</id>
            <phase>process-classes</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <dockerHost>${docker-host}</dockerHost>
              <images>
                <image>
                  <alias>it-database</alias>
                  <name>postgres:latest</name>
                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>prepare-app-image</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <dockerHost>${docker-host}</dockerHost>
              <buildArgs>
                <APP_VERSION>${project.version}</APP_VERSION>
              </buildArgs>
              <images>
                <image>
                  <alias>audit-app</alias>
                  <name>audit-demo</name>
                  <build>
                    <contextDir>${project.basedir}</contextDir>
                    <dockerFile>${project.basedir}/docker/test/Dockerfile</dockerFile>
                    <tags>test</tags>
                  </build>
                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>start-it-database</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <dockerHost>${docker-host}</dockerHost>
              <!--							<imagePullPolicy>Never</imagePullPolicy>-->
              <images>
                <image>
                  <name>postgres:latest</name>
                  <alias>it-database</alias>
                  <run>
                    <namingStrategy>alias</namingStrategy>
                    <hostname>postgres</hostname>
                    <ports>
                      <port>${it-database-port}:5432</port>
                    </ports>
                    <volumes>
                      <bind>
                        <volume>./docker/init.sql:/docker-entrypoint-initdb.d/init.sql</volume>
                      </bind>
                    </volumes>
                    <wait>
                      <log>database system is ready to accept connections</log>
                      <time>10000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>start-it-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <dockerHost>${docker-host}</dockerHost>
              <imagePullPolicy>Never</imagePullPolicy>
              <images>
                <image>
                  <alias>audit-app</alias>
                  <name>audit-demo</name>
                  <run>
                    <links>
                      <link>it-database</link>
                    </links>
                    <dependsOn>
                      <container>it-database</container>
                    </dependsOn>
                    <ports>
                      <port>8080:8080</port>
                    </ports>
                    <env>
                      <APP_OPTS>
                        --spring.datasource.url=jdbc:postgresql://it-database:5432/filmstore?currentSchema=filmstore --spring.profiles.active=it
                      </APP_OPTS>
                    </env>
                    <entrypoint>./wait-for-it.sh -t 10 it-database:5432 -- /run.sh</entrypoint>
                    <hostname>audit-app</hostname>
                    <wait>
                      <log>Started AuditingApplication in</log>
                      <time>36000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>stop-it-containers</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${maven.checkstyle.version}</version>
        <configuration>
          <configLocation>${checkstyle.config.location}/checkstyle.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <prefix>git</prefix>
          <verbose>true</verbose>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
          </generateGitPropertiesFilename>
          <format>json</format>
          <gitDescribe>
            <skip>false</skip>
            <always>false</always>
            <dirty>-dirty</dirty>
          </gitDescribe>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${maven.jacoco.version}</version>
        <configuration>
          <excludes>
            <exclude>pl/solutions/software/sokolik/bartosz/AuditingApplication.*</exclude>
            <exclude>pl/solutions/software/sokolik/bartosz/domain/**</exclude>
            <exclude>pl/solutions/software/sokolik/bartosz/**</exclude>
            <exclude>**/dto/**</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>pre-unit-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.50</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>installation</id>
      <properties>
        <skipUnitTests>true</skipUnitTests>
        <skipITs>true</skipITs>
        <skipDocker>true</skipDocker>
      </properties>
    </profile>

    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <docker-host>tcp://localhost:2375</docker-host>
      </properties>
    </profile>

    <profile>
      <id>unix</id>
      <activation>
        <os>
          <family>unix</family>
          <name>Linux</name>
        </os>
      </activation>
      <properties>
        <docker-host>unix:///var/run/docker.sock</docker-host>
      </properties>
    </profile>
  </profiles>
</project>
